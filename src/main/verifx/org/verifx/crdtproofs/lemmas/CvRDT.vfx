// Copyright (c) 2023 Vrije Universiteit Brussel
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// T is the type of the concrete implementation, e.g. `GCounter`
trait CvRDT[T <: CvRDT[T]] {
  // Excludes states that are not reachable in practice.
  // Returns true if the state is reachable, false otherwise.
  def reachable(): Boolean = true

  // Exclude replicas that are not compatible
  // e.g. OptORSet keeps a summary vector
  //      every replica must have a summary vector of the same size
  //      because it assumes a fixed number of replicas!
  def compatible(that: T): Boolean = true

  // Returns the LUB of `this` and `that`
  def merge(that: T): T

  // True if `this <= that`
  def compare(that: T): Boolean

  // Default implementation of `equals`.
  // `a equals b` iff `a <= b && b <= a` according to `compare`.
  def equals(that: T): Boolean =
    this.asInstanceOf[T].compare(that) && that.compare(this.asInstanceOf[T])
}