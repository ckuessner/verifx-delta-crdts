// Copyright (c) 2023 Vrije Universiteit Brussel
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import org.verifx.crdtproofs.lemmas.CvRDT

/*
 * Extend this trait to prove convergence for a polymorphic state-based CRDT that takes 1 type parameter.
 * The type parameter `T` is a type constructor of a state-based CRDT,
 * e.g. class LWWRegister[V](...) extends CvRDT[LWWRegister[V]]
 *      object LWWRegister extends CvRDTProof1[LWWRegister]
 *      This will generate a polymorphic proof that proves that `LWWRegister` is a CvRDT,
 *      independent of the type of the value the `LWWRegister` stores (i.e. proves it forall `V`).
 */
trait CvRDTProof1[ T[A] <: CvRDT[T[A]] ] {
  proof is_a_CvRDT[S] {
    forall (x: T[S], y: T[S], z: T[S]) {
      ( x.reachable() && y.reachable() && z.reachable() &&
        x.compatible(y) && x.compatible(z) && y.compatible(z) ) =>: {
        x.merge(x).equals(x) && // idempotent
        x.merge(y).equals(y.merge(x)) && // commutative
        x.merge(y).merge(z).equals(x.merge(y.merge(z))) && // associative
        x.merge(y).reachable() && // merged state is reachable
        x.merge(y).merge(z).reachable() &&
        x.compatible(y) == y.compatible(x) // compatible commutes
      }
    }
  }

  proof mergeCommutative[S] {
    forall (x: T[S], y: T[S]) {
      (x.reachable() && y.reachable() && x.compatible(y)) =>: {
        x.merge(y).equals(y.merge(x)) &&
        x.merge(y).reachable()
      }
    }
  }

  proof mergeIdempotent[S] {
    forall (x: T[S]) {
      x.reachable() =>: x.merge(x).equals(x)
    }
  }

  proof mergeAssociative[S] {
    forall (x: T[S], y: T[S], z: T[S]) {
      ( x.reachable() && y.reachable() && z.reachable() &&
          x.compatible(y) && x.compatible(z) && y.compatible(z) ) =>: {
        x.merge(y).merge(z).equals(x.merge(y.merge(z))) &&
        x.merge(y).merge(z).reachable()
      }
    }
  }

  proof compareCorrect[S] {
    forall (x: T[S], y: T[S]) {
      x.equals(y) == (x == y)
    }
  }
}
